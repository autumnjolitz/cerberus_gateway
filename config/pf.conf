# $OpenBSD: pf.conf,v 1.25 2004/01/29 18:54:29 todd Exp $
# $DragonFly: src/etc/pf.conf,v 1.2 2005/12/13 08:38:55 swildner Exp $
#
# See pf.conf(5) and /usr/share/examples/pf for syntax and examples.

ext_if="ext0"
int_if="int1"
localnet = $int_if:network


tcp_game_ports = "{1119, 6113, 1120, 3724}"
udp_game_ports = "{1119, 6113, 1120, 3724}"

icmp_types = "{ echoreq, unreach }"
martians = "{ 127.0.0.0/8, 192.168.0.0/16, 172.16.0.0/12, \
              10.0.0.0/8, 169.254.0.0/16, 192.0.2.0/24, \
              0.0.0.0/8, 240.0.0.0/4 }"

table <bruteforce> persist

# return will say "Connection Refused" and drop will just eat it.
set skip on lo
set debug urgent
set block-policy drop
# Disabled for simplicity.
# set state-policy if-bound
set fingerprints "/etc/pf.os"
# For debugging rules, set the ruleset-optimization to `none`.
# For performance, it should be `basic`
set ruleset-optimization basic

#### Timeout Options
set optimization normal
set timeout { tcp.closing 60, tcp.established 7200}

# Normalize only incoming traffic from outside the house, reassembling any fragmented data
# This will let things out as-is
scrub on $ext_if all fragment reassemble

################ Queueing ####################################################

altq on $ext_if bandwidth 14.8Mb hfsc queue { services, game_upload, web_upload, ssh_upload, domain_upload, bulk_upload, ack, torrent }
  queue services        bandwidth 15% qlimit 500 hfsc(realtime 10% upperlimit 50%) {DNS, Web, SMTP, SSH}
    queue DNS             bandwidth 20%  qlimit 500 hfsc (realtime 5%)
    queue Web             bandwidth 50%  qlimit 500 hfsc
    queue SMTP            bandwidth 20%  qlimit 500 hfsc
    queue SSH             bandwidth 10%  qlimit 500 hfsc(realtime 10%)
  queue game_upload     bandwidth 15% qlimit 500 hfsc(realtime 15% upperlimit 60%)
  queue web_upload      bandwidth  15% qlimit 500 hfsc(realtime  (10%, 10000, 5%) upperlimit 80%)
  queue ssh_upload      bandwidth  15% qlimit 500 hfsc(realtime 15%) {ssh_upload_login, ssh_upload_bulk}
    queue ssh_upload_login bandwidth 30% qlimit 500 hfsc
    queue ssh_upload_bulk  bandwidth 70% qlimit 500 hfsc
  queue bulk_upload     bandwidth 15% qlimit 500 hfsc(realtime 10% default)
  queue ack             bandwidth 19% qlimit 500 hfsc(realtime 10% upperlimit 50%)
  queue domain_upload   bandwidth 5% qlimit 500 hfsc(realtime 5%)
  queue torrent         bandwidth 1% qlimit 500 hfsc (upperlimit 70%)
### rules

# Nat
nat on $ext_if from $localnet to any -> ($ext_if)

# pass smtp, imap to old dcs.
##
## Filtering

block log all 
block quick from <bruteforce>

block drop in quick on $ext_if from $martians to any
block drop out quick on $ext_if from any to $martians

## Default internal traffic:
# Allow any traffic from the local network to flow INTO the int1 card:
pass in on $int_if from $localnet to any keep state
# Classify any outbound traffic from int1 first as an internal only thing
pass out on $int_if from ($int_if) to $localnet keep state label "uncategorized-incoming"

# Local net policies:
## Bulk (uncategorized) client traffic:
pass out on $ext_if inet proto tcp from ($ext_if) to any tag BULK_TRAFFIC label "bulk-outbound-tcp" keep state queue bulk_upload
pass out on $ext_if inet proto udp all tag BULK_TRAFFIC keep state label "bulk-outbound-udp" queue bulk_upload
pass out on $int_if inet from any to $localnet tagged BULK_TRAFFIC keep state label "bulk-incoming"

pass out on $int_if inet proto {udp, igmp} from any to 224.0.0.0/4 tag MULTICAST_TRAFFIC keep state label "bulk-multicast-outbound"
pass out on $int_if inet from 224.0.0.0/4 to any tagged MULTICAST_TRAFFIC keep state label "bulk-multicast-incoming"

# pass out on $int_if inet6 proto udp from $localnet to ff00::/8 tag MULTICAST_TRAFFIC keep state label "bulk-multicast-outbound"
# pass out on $int_if inet6 from ff00::/8 to $localnet tagged MULTICAST_TRAFFIC keep state label "bulk-multicast-incoming"

## Allow any icmp of known types:
pass quick inet proto icmp all icmp-type $icmp_types keep state label "icmp-probes-alt"
# allow out the default range for traceroute(8):
pass out on $ext_if inet proto udp from any to any port 33433 >< 33626 keep state label "traceroute" queue domain_upload

## Game traffic:
pass out on $ext_if inet proto tcp from any to any port $tcp_game_ports tag GAME_TRAFFIC keep state label "game-upload-tcp" queue (game_upload, ack)
pass out on $ext_if inet proto udp from any to any port $udp_game_ports tag GAME_TRAFFIC keep state label "game-upload-udp" queue game_upload
# limit downloads for the games
pass out on $int_if inet from any to any tagged GAME_TRAFFIC keep state label "game-download"

# Bit Torrent
pass out on $ext_if inet proto {tcp, udp} from any to any port 6881:6889 tag BIT_TORRENT keep state label "bittorrent-upload" queue torrent
pass out on $ext_if inet proto {tcp, udp} from any to any port 6969 tag BIT_TORRENT keep state label "bittorrent-tracker" queue torrent
pass out on $int_if inet from any to any tagged BIT_TORRENT keep state label "bittorrent-download"

## Web browsing:
pass out on $ext_if inet proto tcp from any to any port {http, https, imaps} tag WEB_TRAFFIC keep state label "web-upload" queue (web_upload, ack)
pass out on $int_if inet proto tcp from any to any tagged WEB_TRAFFIC keep state label "web-download"

## SSH clients:
pass out on $ext_if inet proto tcp from any to any port ssh tag SSH_TRAFFIC keep state label "ssh-client-out" queue (ssh_upload_bulk, ssh_upload_login)
pass out on $int_if inet proto tcp from any to any tagged SSH_TRAFFIC keep state label "ssh-client-in"

## DNS queries:
pass out on $ext_if inet proto tcp from any to any port domain tag DOMAIN_TRAFFIC label "dns-query-tcp" keep state queue (domain_upload, ack)
pass out on $ext_if inet proto udp from any to any port domain tag DOMAIN_TRAFFIC keep state label "dns-query" queue domain_upload
pass out on $int_if inet from any to any tagged DOMAIN_TRAFFIC keep state label "dns-return"

# Our services:
## SSH:
pass in on $ext_if inet proto tcp from any to ($ext_if) port ssh tag SSH_EXT keep state \
       (max-src-conn 15, max-src-conn-rate 5/3, \
        overload <bruteforce> flush global) label "ssh-server-in" queue SSH

## DNS:
pass in on $ext_if inet proto tcp from any to ($ext_if) port domain tag DNS_EXT label "dns-tcp-in" keep state queue DNS
pass in on $ext_if inet proto udp from any to ($ext_if) port domain tag DNS_EXT keep state label "dns-udp-in" queue DNS

## HTTP Server:
pass in on $ext_if inet proto tcp from any to ($ext_if) port {https, http} tag WEB_EXT keep state label "nginx-in" queue Web
# Due to rdr to localhost proxy:
pass in on $ext_if inet proto tcp from any to (lo0) port {9443, 9080} tag WEB_EXT keep state label "nginx-proxy-in" queue Web

## IMAP(S)
pass in on $ext_if inet proto tcp from any to ($ext_if) port {143, 993} tag IMAP_EXT keep state label "imap-in" queue IMAP
# Due to rdr to localhost proxy:
pass in on $ext_if inet proto tcp from any to (lo0) port {9143, 9993} tag IMAP_EXT keep state label "imap-proxy-in" queue IMAP

## SMTP
pass in on $ext_if inet proto tcp from any to ($ext_if) port {25, 587} tag SMTP_EXT keep state label "smtp-in" queue SMTP
# Due to rdr to localhost proxy:
pass in on $ext_if inet proto tcp from any to (lo0) port {9025, 9587} tag SMTP_EXT keep state label "smtp-proxy-in" queue SMTP

